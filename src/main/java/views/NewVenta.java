/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package views;

import TiendaZapatos.DAOClienteImpl;
import TiendaZapatos.DAOColoresImpl;
import TiendaZapatos.DAOFacturaCompraImpl;
import TiendaZapatos.DAOFacutraVentaImpl;

import TiendaZapatos.DAOGestionProductosImpl;
import TiendaZapatos.DAOMetodoPagoImpl;
import TiendaZapatos.DAOTallaImpl;
import TiendaZapatos.DAOVentaZapatoImpl;
import TiendaZapatos.DAOZapatoColorImpl;
import TiendaZapatos.DAOZapatoColorTallaImpl;
import TiendaZapatos.dashboard;
import com.toedter.calendar.JDateChooser;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Date;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.cliente;
import models.colores;
import models.ventazapato;
import models.facturaventa;
import models.metodopago;
import models.talla;
import models.zapato;
import models.zapato_color;
import models.zapatocolor_talla;



public class NewVenta extends javax.swing.JPanel {

    private DAOFacutraVentaImpl daoFacturaVenta = new DAOFacutraVentaImpl();
    private DAOGestionProductosImpl daoZapato = new DAOGestionProductosImpl();
    private DAOClienteImpl daoCliente = new DAOClienteImpl();
    private DAOVentaZapatoImpl dAOVentaZapatoImpl = new DAOVentaZapatoImpl();
    private DAOColoresImpl daoColor = new DAOColoresImpl();
    private DAOTallaImpl daoTalla = new DAOTallaImpl(); 
    private DAOZapatoColorTallaImpl daoZapatoColorTalla = new DAOZapatoColorTallaImpl  ();
        
    public NewVenta() {
        initComponents();
        initStyles ();
        cargarClientes();
        cargarZapatos();
        cargarMetodosPago();
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BackGround = new javax.swing.JPanel();
        Titulo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboCliente = new javax.swing.JComboBox<>();
        btnNuevo = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        date = new com.toedter.calendar.JDateChooser();
        comboZapato = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        txtPrecioU = new javax.swing.JTextField();
        btnAgregarPrdocuto = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtTotal = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        btnRegistrar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        comboColor = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        comboTalla = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        txtDisponobles = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        comboMetodosPago = new javax.swing.JComboBox<>();

        BackGround.setBackground(new java.awt.Color(255, 153, 153));

        Titulo.setText("Nueva Venta");

        jLabel2.setText("Cliente : ");

        comboCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboClienteActionPerformed(evt);
            }
        });

        btnNuevo.setText("NUEVO CLIENTE");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        jLabel3.setText("FECHA DE VENTA : ");

        comboZapato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboZapatoActionPerformed(evt);
            }
        });

        jLabel6.setText("Precio Unitario");

        jLabel5.setText("Cantidad");

        btnAgregarPrdocuto.setText("AGREGAR PRODUCTO");
        btnAgregarPrdocuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarPrdocutoActionPerformed(evt);
            }
        });

        jLabel7.setText("Producto a Vender:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Producto", "Cantidad", "Color", "Talla", "Fecha Venta", "Precio Unitario", "Subtotal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        txtTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalActionPerformed(evt);
            }
        });

        jButton1.setText("CANCELAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnRegistrar.setText("REGISTAR");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        jLabel4.setText("Total Venta : ");

        jLabel8.setText("Color");

        comboColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboColorActionPerformed(evt);
            }
        });

        jLabel9.setText("Talla");

        comboTalla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTallaActionPerformed(evt);
            }
        });

        jLabel1.setText("Disponibles : ");

        jLabel10.setText("Metodo Pago");

        comboMetodosPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboMetodosPagoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BackGroundLayout = new javax.swing.GroupLayout(BackGround);
        BackGround.setLayout(BackGroundLayout);
        BackGroundLayout.setHorizontalGroup(
            BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackGroundLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackGroundLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(12, 12, 12)
                        .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                        .addComponent(btnRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))
                    .addGroup(BackGroundLayout.createSequentialGroup()
                        .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1051, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30))
                    .addGroup(BackGroundLayout.createSequentialGroup()
                        .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BackGroundLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(12, 12, 12)
                                .addComponent(comboZapato, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(BackGroundLayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(comboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(BackGroundLayout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, BackGroundLayout.createSequentialGroup()
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtPrecioU, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(comboMetodosPago, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(BackGroundLayout.createSequentialGroup()
                                    .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(25, 25, 25)
                                    .addComponent(jLabel3)
                                    .addGap(28, 28, 28)
                                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(BackGroundLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboColor, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboTalla, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BackGroundLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtDisponobles, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackGroundLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAgregarPrdocuto, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32))))))
        );
        BackGroundLayout.setVerticalGroup(
            BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackGroundLayout.createSequentialGroup()
                .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BackGroundLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(BackGroundLayout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(comboZapato, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8)
                                .addComponent(comboColor, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9)
                                .addComponent(comboTalla, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1)
                                .addComponent(txtDisponobles, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(24, 24, 24)
                .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtPrecioU, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAgregarPrdocuto, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboMetodosPago, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(BackGroundLayout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(BackGroundLayout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(BackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
   
    
     private void initStyles () {
        Titulo.putClientProperty( "FlatLaf.styleClass" , "h3" );
       txtCantidad.putClientProperty("JTextField.placeholderText", "Cantidad Vendida.");

    }
    
    
    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        
        dashboard.getInstance().showJpanel(new NewCliente());

    }//GEN-LAST:event_btnNuevoActionPerformed

    private void txtTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
    try {
                int idCliente = comboCliente.getSelectedIndex();
                
                 java.sql.Date fecha = obtenerFechaSQL(date);
                
               

                // Obtener el ID correcto del método de pago
                int idMetodoPago   = comboMetodosPago.getSelectedIndex();
              

                // mensaje de depuracion porque esta mi@$#da sigue dando error 
                
                System.out.println("ID Método de Pago a enviar: " + idMetodoPago);

                // Crear el objeto facturaventa con el ID de metodo de pago correcto 
                // Aca estaba el put0 error
                facturaventa factura = new facturaventa(idCliente, 0, idMetodoPago, fecha);

                // Confirmar que se asigno correctamente en facturaventa
                System.out.println("ID Método de Pago en facturaventa: " + factura.getId_metodopago());

                // Procedo a la creacion 
                int idFacturaVenta = daoFacturaVenta.create(factura);


                 double totalFactura = 0;
                 int totalCantidad = 0;

                 for (int i = 0; i < jTable1.getRowCount(); i++) {
                     String nombreZapato = jTable1.getValueAt(i, 0).toString();
                     int cantidad = (int) jTable1.getValueAt(i, 1);
                     String nombreColor = jTable1.getValueAt(i, 2).toString();
                     String numeroTalla = jTable1.getValueAt(i, 3).toString();

                     int idZapato = daoZapato.obtenerIdPorNombre(nombreZapato);
                     int idColor = daoColor.obtenerIdPorNombre(nombreColor);
                     int idTalla = daoTalla.obtenerIdPorNumero(numeroTalla);

                     if (idZapato != -1) {
                         double precioZapato = daoZapato.getPrecioVentaPorZapato(idZapato);
                         totalFactura += precioZapato * cantidad;
                         totalCantidad += cantidad;

                       
                         ventazapato ventazapato = new ventazapato(idZapato, idFacturaVenta, cantidad, idColor, idTalla);
                         
                         dAOVentaZapatoImpl.create(ventazapato);
                         
                         daoZapato.actualizatCantidadZapatoVendido(idZapato, cantidad);
                         
                         dAOVentaZapatoImpl.actualizarCantidadZapatoColor(idZapato, idColor, cantidad);
                         
                         daoZapatoColorTalla.actualizarCantidadTallaVenida(idZapato, idTalla, idColor, cantidad);
                         
                         
                     } else {
                         System.out.println("Zapato no encontrado: " + nombreZapato);
                     }
                 }

                 daoFacturaVenta.actualizarTotal(idFacturaVenta, (float) totalFactura, totalCantidad);
              
                 JOptionPane.showMessageDialog(this, "Registro completado exitosamente.");
                 
                 
                 // liampiar todo
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setRowCount(0); 

               
                comboCliente.setSelectedIndex(0);
             
                date.setDate(null);             
                txtTotal.setText(""); 
               
                
                // Volver a habilitar el comboMetodosde pago
                comboMetodosPago.setEnabled(true);
                comboCliente.setEnabled(true);
                date.setEnabled(true);
                
             } catch (Exception ex) {
                 ex.printStackTrace();
                 JOptionPane.showMessageDialog(this, "Error al registrar la compra: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
             }
         
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void comboClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboClienteActionPerformed
  
        
        
    }//GEN-LAST:event_comboClienteActionPerformed

    private void comboZapatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboZapatoActionPerformed
          zapato zapatoSeleccionado = (zapato) comboZapato.getSelectedItem();

        if (zapatoSeleccionado != null) {
            System.out.println("Zapato seleccionado: " + zapatoSeleccionado.getDescripcion());

            try {
                // Obtener el precio de venta del zapato seleccionado
                float precioVenta = obtenerPrecioVenta(zapatoSeleccionado.getId_zapato());
                txtPrecioU.setText(String.format("%.2f", precioVenta));
                txtPrecioU.setEditable(false);

                // Limpiar el comboColor antes de llenarlo
                comboColor.removeAllItems();
                comboTalla.removeAllItems(); // Limpiar el comboTalla también
                txtDisponobles.setText(""); // Limpiar el campo de cantidad disponible

                List<zapato_color> coloresDisponibles = obtenerColoresDisponibles(zapatoSeleccionado.getId_zapato());

                // Agregar colores disponibles al comboColor
                for (zapato_color color : coloresDisponibles) {
                    comboColor.addItem(color); // Agregar el objeto zapato_color al comboBox
                }

                // Si hay colores disponibles, seleccionar el primero y llenar las tallas
                if (!coloresDisponibles.isEmpty()) {
                    comboColor.setSelectedIndex(0); // Seleccionar el primer color

                    // Llenar las tallas para el primer color seleccionado
                    zapato_color colorSeleccionado = (zapato_color) comboColor.getSelectedItem();
                    if (colorSeleccionado != null) {
                        List<zapatocolor_talla> tallasDisponibles = cargarTallasPorZapatoColor(colorSeleccionado.getId_zapatocolor());
                        comboTalla.removeAllItems(); // Limpiar el comboTalla

                        for (zapatocolor_talla talla : tallasDisponibles) {
                            comboTalla.addItem(talla); // Agregar tallas al comboTalla
                        }

                        // Verificar si hay tallas disponibles
                        if (!tallasDisponibles.isEmpty()) {
                            comboTalla.setSelectedIndex(0); // Seleccionar la primera talla
                            // Mostrar la cantidad disponible en el textField
                            txtDisponobles.setText(String.valueOf(tallasDisponibles.get(0).getCantidad()));
                        } else {
                            txtDisponobles.setText("0"); // Si no hay tallas, mostrar 0
                        }
                    }
                } else {
                    txtDisponobles.setText("0"); // Si no hay colores, mostrar 0
                }

            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Error al obtener el precio de venta o colores disponibles del zapato.");
            }}
    }//GEN-LAST:event_comboZapatoActionPerformed

    private void btnAgregarPrdocutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarPrdocutoActionPerformed
       
        // Obtener el cliente seleccionado
        cliente clienteSeleccionado = (cliente) comboCliente.getSelectedItem();

        // Obtener el zapato seleccionado
        zapato zapatoSeleccionado = (zapato) comboZapato.getSelectedItem();

        // Verificar que txtCantidad no esté vacío
        if (txtCantidad.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa una cantidad válida.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar que date no esté vacío
        if (date.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona una fecha.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar que el zapato no esté en blanco
        if (zapatoSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un zapato.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar que los ComboBox de color y talla tengan una selección
        if (comboColor.getItemCount() == 0 || comboTalla.getItemCount() == 0) {
            JOptionPane.showMessageDialog(this, "No hay opciones de color o talla para este producto.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener la cantidad
        int cantidad = Integer.parseInt(txtCantidad.getText());

        // Manejo del precio con formato adecuado
        float precioVenta = 0;
        try {
            NumberFormat format = NumberFormat.getInstance();
            precioVenta = format.parse(txtPrecioU.getText()).floatValue();
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Formato de precio no válido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener la fecha desde el JDateChooser
        java.sql.Date fechaProducto = obtenerFechaSQL(date);

        // Obtener la descripción del zapato, color y talla seleccionados
        String descripcion = zapatoSeleccionado.getDescripcion();
        String colorSeleccionado = comboColor.getSelectedItem() != null ? comboColor.getSelectedItem().toString() : "";
        String tallaSeleccionada = comboTalla.getSelectedItem() != null ? comboTalla.getSelectedItem().toString() : "";

        // Agregar la fila a la tabla
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Object[] rowData = { descripcion, cantidad, colorSeleccionado, tallaSeleccionada, fechaProducto, precioVenta, precioVenta * cantidad };
        model.addRow(rowData);

        // Limpiar los campos del formulario
        txtCantidad.setText("");
        txtPrecioU.setText("");
        
        comboColor.setSelectedIndex(-1); // Dejar en blanco los ComboBox de color y talla para la proxima seleccion
        comboTalla.setSelectedIndex(-1);

        // Actualizar el total
        actualizarTotal();
        
        // Deshabilitar el ComboBox de metodo de pago si es el primer producto agregado
        if (jTable1.getRowCount() == 1) {
            comboMetodosPago.setEnabled(false);
            comboCliente.setEnabled(false);
            date.setEnabled(false);
        }
    }//GEN-LAST:event_btnAgregarPrdocutoActionPerformed

    private void comboColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboColorActionPerformed
    
        // Evento para el ComboBox de colores
     comboColor.addActionListener(new ActionListener() {
         @Override
         public void actionPerformed(ActionEvent e) {
             zapato_color colorSeleccionado = (zapato_color) comboColor.getSelectedItem();

             if (colorSeleccionado != null) {
                 System.out.println("color seleccionado: " + colorSeleccionado.getnombre_zapato());

                 try {
                     // Limpiar el comboTalla antes de llenarlo
                     comboTalla.removeAllItems();
                     List<zapatocolor_talla> tallasDisponibles = cargarTallasPorZapatoColor(colorSeleccionado.getId_zapatocolor());

                     // Agregar tallas disponibles al comboTalla
                     for (zapatocolor_talla talla : tallasDisponibles) {
                         comboTalla.addItem(talla); // Agregar el objeto zapatocolor_talla al comboBox
                     }

                     // Verificar si hay tallas disponibles y seleccionar la primera
                     if (!tallasDisponibles.isEmpty()) {
                         comboTalla.setSelectedIndex(0); // Selecciona la primera talla automáticamente
                         // Actualizar la cantidad en el textField
                         int cantidadDisponible = tallasDisponibles.get(0).getCantidad(); // Obtener cantidad de la primera talla
                         txtDisponobles.setText(String.valueOf(cantidadDisponible)); // Mostrar en el TextField
                     } else {
                         txtDisponobles.setText("0"); // Si no hay tallas, mostrar 0
                     }

                 } catch (Exception ex) {
                     ex.printStackTrace();
                     System.out.println("Error al obtener el precio de venta o colores disponibles del zapato.");
                 }
             }
         }
     });

     // Evento para el ComboBox de tallas
     comboTalla.addActionListener(new ActionListener() {
         @Override
         public void actionPerformed(ActionEvent e) {
             zapatocolor_talla tallaSeleccionada = (zapatocolor_talla) comboTalla.getSelectedItem();
             if (tallaSeleccionada != null) {
                 int cantidadDisponible = tallaSeleccionada.getCantidad(); // Obtener cantidad
                 txtDisponobles.setText(String.valueOf(cantidadDisponible)); // Mostrar en el TextField
             }
         }
     });
    }//GEN-LAST:event_comboColorActionPerformed

    
    private List<zapatocolor_talla> cargarTallasPorZapatoColor(int idZapatoColor) {
        
        
      DAOZapatoColorTallaImpl daoZCT = new DAOZapatoColorTallaImpl();
    List<zapatocolor_talla> tallasDisponibles = new ArrayList<>();

    try {
        tallasDisponibles = daoZCT.getTallasPorZapatoColor(idZapatoColor);
    } catch (Exception e) {
        Logger.getLogger(NewVenta.class.getName()).log(Level.SEVERE, null, e);
        JOptionPane.showMessageDialog(this, "Error al obtener tallas disponibles", "AVISO", JOptionPane.ERROR_MESSAGE);
    }

    return tallasDisponibles;
}
    
    
    private void comboTallaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTallaActionPerformed
   
    comboTalla.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        // Obtener el objeto zapatocolor_talla seleccionado
        zapatocolor_talla tallaSeleccionada = (zapatocolor_talla) comboTalla.getSelectedItem();

        if (tallaSeleccionada != null) {
            // Obtener la cantidad disponible y mostrarla en el JTextField
            int cantidadDisponible = tallaSeleccionada.getCantidad(); // Asegúrate de que este método esté presente
            txtDisponobles.setText(String.valueOf(cantidadDisponible));
        } else {
            // Limpiar el JTextField si no hay talla seleccionada
            txtDisponobles.setText("");
        }
    }
});
    }//GEN-LAST:event_comboTallaActionPerformed

    private void comboMetodosPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboMetodosPagoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboMetodosPagoActionPerformed

    
   
    
    private void actualizarTotal() {   
        
          float total = 0;
          int totalProductos = 0;
          DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
          int rowCount = model.getRowCount();

          // Sumar todos los valores de la columna "subtotal" y contar la cantidad de productos
          for (int i = 0; i < rowCount; i++) {
              total += (float) model.getValueAt(i, 6); //  "subtotal" está en la columna 6
              totalProductos += (int) model.getValueAt(i, 1); // "cantidad" está en la columna 1
          }

          // Mostrar el total en txtTotal con símbolo $ y cantidad de productos
          txtTotal.setText(String.format("$%.2f (%d productos)", total, totalProductos));
    }
    
    // Metodos para manejo de las ComboBox y llamadas de datos 
    
    public List<cliente> obtenenrClientes() {
        DAOClienteImpl daoClientes = new DAOClienteImpl();
        List<cliente> clientes = new ArrayList<>(); // Crear una lista para almacenar los proveedores

        try {
            clientes = daoClientes.getAllClientes(); 
        } catch (Exception e) {
            Logger.getLogger(NewCliente.class.getName()).log(Level.SEVERE, null, e);
            javax.swing.JOptionPane.showMessageDialog(this, "Error al obtener las marcas", "AVISO", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

        return clientes; // Retornar la lista de proveedores
    }
    
    private void cargarClientes() {
    comboCliente.addItem(new cliente(0, "")); // Agregar un valor en blanco o por defecto
    
    List<cliente> listaClientes = obtenenrClientes(); // Método que obtiene los proveedores
    for (cliente c : listaClientes) {
        comboCliente.addItem(c); // Agregar cada proveedor al JComboBox
    }
}
    
    public List<zapato> ObtenerZapatos () {
         
        DAOGestionProductosImpl daoZapato = new DAOGestionProductosImpl();
        List<zapato> zapatos = new ArrayList<>(); // Crear una lista para almacenar los proveedores

        try {
            zapatos = daoZapato.getallZapatos(); 
        } catch (Exception e) {
            Logger.getLogger(NewCliente.class.getName()).log(Level.SEVERE, null, e);
            javax.swing.JOptionPane.showMessageDialog(this, "Error al obtener las marcas", "AVISO", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

        return zapatos; // Retornar la lista de zapatos
    }
    
    private void cargarZapatos() {
    comboZapato.addItem(new zapato(0, "")); // Agregar un valor en blanco o por defecto
    
    List<zapato> listaZapatos = ObtenerZapatos(); // Método que obtiene los proveedores
    for (zapato z : listaZapatos) {
        comboZapato.addItem(z); // Agregar cada proveedor al JComboBox
    }
}
    
    public List<metodopago> ObtenerMetodosPago() {
     DAOMetodoPagoImpl daoMetodoPago = new DAOMetodoPagoImpl();
    List<metodopago> metodosPago = new ArrayList<>();

    try {
        metodosPago = daoMetodoPago.read(); // Método que obtiene todos los métodos de pago
    } catch (Exception e) {
        Logger.getLogger(NewVenta.class.getName()).log(Level.SEVERE, null, e);
        javax.swing.JOptionPane.showMessageDialog(this, "Error al obtener los métodos de pago", "AVISO", javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    return metodosPago; // Retornar la lista de métodos de pago
}
    
    private void cargarMetodosPago() {
    

    List<metodopago> listaMetodosPago = ObtenerMetodosPago(); // Método que obtiene los métodos de pago
    for (metodopago mp : listaMetodosPago) {
        comboMetodosPago.addItem(mp); // Agregar cada método de pago al JComboBox
    }
}
    
    public List<zapato_color> obtenerColoresDisponibles(int idZapato) {
        
    DAOGestionProductosImpl daoZapatoColor = new DAOGestionProductosImpl();
    List<zapato_color> coloresDisponibles = new ArrayList<>();

    try {
        coloresDisponibles = daoZapatoColor.obtenerColoresZapatoConCantidad(idZapato);
    } catch (Exception e) {
        Logger.getLogger(NewVenta.class.getName()).log(Level.SEVERE, null, e);
        JOptionPane.showMessageDialog(this, "Error al obtener colores disponibles", "AVISO", JOptionPane.ERROR_MESSAGE);
    }

    return coloresDisponibles;
}
    
    
    
    
    private float obtenerPrecioVenta (int idZapato) {
        DAOGestionProductosImpl daoZapato = new DAOGestionProductosImpl();
        float precioVenta = 0;

        try {
            // Aquí se hace la consulta para obtener el precio_compra basado en el idZapato
            precioVenta = daoZapato.getPrecioVentaPorZapato(idZapato);
        } catch (Exception e) {
            Logger.getLogger(zapato.class.getName()).log(Level.SEVERE, null, e);
            javax.swing.JOptionPane.showMessageDialog(this, "Error al obtener el precio del zapato", "AVISO", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

        return precioVenta; // Retorna el precio de compra
    }
    
    
    private java.sql.Date obtenerFechaSQL(JDateChooser dateChooser) {
    java.util.Date fechaUtil = dateChooser.getDate();
    if (fechaUtil != null) {
        return new java.sql.Date(fechaUtil.getTime()); // Convertir java.util.Date a java.sql.Date
    }
    return null; // Si no hay fecha, retorna null   
    
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BackGround;
    private javax.swing.JLabel Titulo;
    private javax.swing.JButton btnAgregarPrdocuto;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JComboBox<cliente> comboCliente;
    private javax.swing.JComboBox<zapato_color> comboColor;
    private javax.swing.JComboBox<metodopago> comboMetodosPago;
    private javax.swing.JComboBox<zapatocolor_talla> comboTalla;
    private javax.swing.JComboBox<zapato> comboZapato;
    private com.toedter.calendar.JDateChooser date;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtDisponobles;
    private javax.swing.JTextField txtPrecioU;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
